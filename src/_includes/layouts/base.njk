{%- from "../system/component.njk" import component -%}
<!doctype html>
<html lang="en" data-theme="fantasy">
<head>
    <title>{{ title }} - James McNee</title>
    <link rel="stylesheet" type="text/css" href="/assets/main.css"/>
    <link rel="icon" type="image/x-icon" href="/favicon.ico">

    <link rel="preload" href="/styles/library/remix/remixicon.min.css" as="style"
          onload="this.onload=null;this.rel='stylesheet'">
    <noscript>
        <link rel="stylesheet" href="/styles/library/remix/remixicon.min.css">
    </noscript>

    <link rel="preload" href="/styles/library/prism-coldark.css" as="style"
          onload="this.onload=null;this.rel='stylesheet'">
    <noscript>
        <link rel="stylesheet" href="/styles/library/prism-coldark.css">
    </noscript>

    <meta http-equiv="Content-Security-Policy" content="default-src 'self' jamesmcnee.com *.jamesmcnee.com jamesmcnee.co.uk *.jamesmcnee.co.uk; img-src *; media-src *; script-src 'unsafe-inline'" />

    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="{% if synopsis %}{{ synopsis }}{% else %}{{ title }}{% endif %}">
</head>
<body>
<script type="text/javascript">
    function addOnClickOutsideListener(element, func) {
        const isVisible = elem => !!elem && !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);

        const outsideClickListener = event => {
            if (!element.contains(event.target) && isVisible(element)) {
                func(element);
                removeClickListener();
            }
        }

        const removeClickListener = () => {
            element.removeAttribute('click-outside-attached')
            document.removeEventListener('click', outsideClickListener);
        }

        if (element.getAttribute('click-outside-attached') !== 'true') {
            element.setAttribute('click-outside-attached', 'true')
            document.addEventListener('click', outsideClickListener);
        }
    }

    function debounce(func, timeout = 250) {
        let timer;
        return (...args) => {
            clearTimeout(timer);
            timer = setTimeout(() => {
                func.apply(this, args);
            }, timeout);
        };
    }
</script>
{% include "../components/navigation.njk" %}
{{ content | safe }}
<script src="/assets/main.js"></script>
</body>
</html>
